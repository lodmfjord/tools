main_aws_login() {
    
    local COMMAND_NORMAL=0
    local COMMAND_DISPLAY_HELP=10
    local COMMAND_INSTALL=20
    local COMMAND_CLEAR=30
    local COMMAND_EXPORT=40
    local PROFILE=""
    _noop() {
        echo ""
    }
    _aws_login_get_get_shell_name() {
        local pid=$$
        local ppid=$(ps -p "$pid" -o ppid= | xargs)
        get_process_name_by_pid() {
            local proc_pid=$1
            local proc_name=$(ps -o comm= -p "$proc_pid")
            echo "$proc_name"
        }
        
        local current_shell_name=$(get_process_name_by_pid "$pid")
        local parent_shell_name=$(get_process_name_by_pid "$ppid")
        
        
        if [[ "$current_shell_name" == "bash" ]] || [[ "$parent_shell_name" == "bash" ]]; then
            echo "bash"
            elif [[ "$current_shell_name" == "zsh" ]] || [[ "$parent_shell_name" == "zsh" ]]; then
            echo "zsh"
        else
            echo "Unknown shell"
        fi
        
    }
    _aws_login_get_update_aws_bash_login() {
        local bashrc="$HOME/.bashrc"
        local temp_file=$(mktemp)
        local block="#AWS_LOGIN - AUTOGENERATED
        function ___aws_login() {
            source ~/bin/.aws-login \"\$@\"
        }
        alias aws-login='___aws_login'
        export AWS_LOGIN_TOOL_FOR_FUN=true
        #AWS_LOGIN - ENDOF AUTOGENERATED"
        
        if grep -q "#AWS_LOGIN - AUTOGENERATED" "$bashrc"; then
            sed '/#AWS_LOGIN - AUTOGENERATED/,/#AWS_LOGIN - ENDOF AUTOGENERATED/d' "$bashrc" > "$temp_file"
            mv "$temp_file" "$bashrc"
        fi
        
        echo "$block" >> "$bashrc"
    }
    _aws_login_get_update_aws_zsh_login() {
        local zshrc="$HOME/.zshrc"
        local temp_file=$(mktemp)
        
        # Define the block to be added
        local block="#AWS_LOGIN - AUTOGENERATED
        function ___aws_login() {
            source ~/bin/.aws-login \"\$@\"
        }
        alias aws-login='___aws_login'
        export AWS_LOGIN_TOOL_FOR_FUN=true
        #AWS_LOGIN - ENDOF AUTOGENERATED"
        
        if grep -q "#AWS_LOGIN - AUTOGENERATED" "$zshrc"; then
            sed '/#AWS_LOGIN - AUTOGENERATED/,/#AWS_LOGIN - ENDOF AUTOGENERATED/d' "$zshrc" > "$temp_file"
            mv "$temp_file" "$zshhrc"
        fi
        
        echo "$block" >> "$zshrc"
    }
    
    _aws_login_get_install() {
        local shell_name=$(_aws_login_get_get_shell_name)
        local src=$(realpath "$0")
        local dest=$(realpath ~/bin/.aws-login)
        local destFolder=$(dirname "$dest")
        
        if [ "$src" != "$dest" ]; then
            echo "Installing aws-login to $dest"
            mkdir -p $destFolder
            cp -f "$0" $dest
            chmod +x $dest
        fi
        if [ "$shell_name" = "bash" ]; then
            echo Installing aws-login to $HOME/.bashrc
            _aws_login_get_update_aws_bash_login
            elif [ "$shell_name" = "zsh" ]; then
            echo "Installing aws-login to $HOME/.zshrc"
            _aws_login_get_update_aws_zsh_login
        else
            echo "Unknown shell $shell_name"
            SKIP_EARLY=true
        fi
        if [ "${SKIP_EARLY-}" ]; then
            echo "Reload your shell"
            echo "Done"
        fi
    }
    _aws_login_get_display_help() {
        echo "Usage: $0 [profile_name] [--clear] [--instal] [--help] [--export]"
        echo
        echo "Arguments:"
        echo "  profile_name   Name of the AWS profile to use."
        echo "  --clear        Clear all AWS environment variables."
        echo "  --install      Install the aws-login tool."
        echo "  --help         Display this help information."
        echo "  --export       Export AWS environment variables for the specified profile."
        echo
        echo "Example:"
        echo "  $0 myprofile --export"
        echo "  $0 --clear"
    }
    _aws_login_get_clear() {
        unset AWS_ACCESS_KEY_ID
        unset AWS_SECRET_ACCESS_KEY
        unset AWS_SESSION_TOKEN
        unset AWS_DEFAULT_REGION
        unset AWS_REGION
        unset AWS_PROFILE
        export AWS_REGION
        export AWS_DEFAULT_REGION
        export AWS_ACCESS_KEY_ID
        export AWS_SECRET_ACCESS_KEY
        export AWS_SESSION_TOKEN
        export AWS_PROFILE
    }
    local profile_array=()
    _aws_login_get_profiles() {
        local profile_list=$(aws configure list-profiles)
        for i in $profile_list; do profile_array+=($i) ; done
    }
    _aws_login_get_has_to_install() {
        if [ -z "${AWS_LOGIN_TOOL_FOR_FUN-}" ]; then
            return 0
        fi
        return 1
    }
    _aws_login_parser() {
        local COMMAND=$COMMAND_NORMAL
        local PROFILE=""
        for arg in "$@"; do
            if [ "$arg" = "--help" ]; then
                COMMAND=$COMMAND_DISPLAY_HELP
                elif [ "$arg" = "--install" ]; then
                COMMAND=$COMMAND_INSTALL
                elif [ "$arg" = "--clear" ]; then
                COMMAND=$COMMAND
                elif [ "$arg" = "--export" ]; then
                COMMAND=$COMMAND_EXPORT
            else
                PROFILE=$arg
            fi
        done
        echo "$PROFILE%%$COMMAND"
        
    }
    
    _aws_valid_profile() {
        if [[ ! " ${profile_array[@]} " =~ " ${PROFILE-} " ]]; then
            return 1
        fi
        
        return 0
    }
    _aws_select_profile() {
        local PS3="Select profile: "
        select opt in "${profile_array[@]}"; do
            PROFILE=$opt
            break
        done
    }
    _aws_need_to_login() {
        if ! aws sts get-caller-identity --profile=$PROFILE >/dev/null 2>&1; then
            return 0
        else
            return 1
        fi
    }
    _aws_export() {
        eval "$(aws configure export-credentials --profile $PROFILE --format env)"
        export AWS_ACCESS_KEY_ID
        export AWS_SECRET_ACCESS_KEY
        export AWS_SESSION_TOKEN
    }
    _aws_process() {
        local COMMAND
        local _VALUE=$(_aws_login_parser "$@")
        local delimiter="%%"
        PROFILE="${_VALUE%%$delimiter*}"
        COMMAND="${_VALUE#*$delimiter}"
        
        
        case $COMMAND in
            $COMMAND_NORMAL | $COMMAND_EXPORT)
                _aws_login_get_profiles
                [ -z "${PROFILE-}" ] && _aws_select_profile || _noop
                _aws_valid_profile || { echo "Invalid profile name: $PROFILE"; return 1; }
                _aws_need_to_login && {  echo "AWS credentials are invalid or expired."; aws sso login --profile=$PROFILE; } || _noop
                echo "AWS Profile set to $PROFILE"
                export AWS_PROFILE=$PROFILE
                [ "$COMMAND" = "$COMMAND_EXPORT" ] &&  _aws_export && echo "AWS environment variables exported."
            ;;
            $COMMAND_DISPLAY_HELP)
                _aws_login_get_display_help
            ;;
            $COMMAND_INSTALL)
                _aws_login_get_install
            ;;
            $COMMAND_CLEAR)
                _aws_login_get_clear
            ;;
            *)
                echo "Unknown command"
            ;;
        esac
    }
    
    _aws_login_get_has_to_install && install || _aws_process "$@"
}

main_aws_login "$@"